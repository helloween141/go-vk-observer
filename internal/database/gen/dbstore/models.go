// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package dbstore

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type EntityType string

const (
	EntityTypeWALL  EntityType = "WALL"
	EntityTypeTOPIC EntityType = "TOPIC"
)

func (e *EntityType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EntityType(s)
	case string:
		*e = EntityType(s)
	default:
		return fmt.Errorf("unsupported scan type for EntityType: %T", src)
	}
	return nil
}

type NullEntityType struct {
	EntityType EntityType
	Valid      bool // Valid is true if EntityType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEntityType) Scan(value interface{}) error {
	if value == nil {
		ns.EntityType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EntityType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEntityType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EntityType), nil
}

type TelegramNotification struct {
	ID           int32
	TelegramID   int64
	EntityID     int32
	LastPostDate sql.NullInt64
	CheckedAt    sql.NullTime
}

type VkEntity struct {
	ID   int32
	Slug string
	Type EntityType
	Name string
}
